-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_audit_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  admin_id uuid NOT NULL,
  action character varying NOT NULL,
  target_user_id uuid,
  old_value jsonb,
  new_value jsonb,
  reason text,
  ip_address inet,
  user_agent text,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT admin_audit_log_pkey PRIMARY KEY (id),
  CONSTRAINT admin_audit_log_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.users(id),
  CONSTRAINT admin_audit_log_target_user_id_fkey FOREIGN KEY (target_user_id) REFERENCES public.users(id)
);
CREATE TABLE public.admins (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL UNIQUE,
  name character varying NOT NULL,
  permissions jsonb DEFAULT '[]'::jsonb,
  access_level USER-DEFINED DEFAULT 'standard'::access_level,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT admins_pkey PRIMARY KEY (id),
  CONSTRAINT admins_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.attendance (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  student_id uuid NOT NULL,
  term_id uuid NOT NULL,
  quadrant_id character varying NOT NULL,
  attendance_date date NOT NULL,
  is_present boolean NOT NULL,
  reason character varying,
  marked_by uuid NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT attendance_pkey PRIMARY KEY (id),
  CONSTRAINT attendance_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT attendance_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id),
  CONSTRAINT attendance_marked_by_fkey FOREIGN KEY (marked_by) REFERENCES public.users(id),
  CONSTRAINT attendance_quadrant_id_fkey FOREIGN KEY (quadrant_id) REFERENCES public.quadrants(id)
);
CREATE TABLE public.attendance_eligibility (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid,
  term_id uuid,
  attendance_type character varying NOT NULL,
  component_id uuid,
  total_sessions integer DEFAULT 0,
  attended_sessions integer DEFAULT 0,
  percentage numeric DEFAULT 0,
  eligibility_status character varying DEFAULT 'ict'::character varying,
  threshold_required numeric DEFAULT 75.00,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT attendance_eligibility_pkey PRIMARY KEY (id),
  CONSTRAINT attendance_eligibility_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT attendance_eligibility_component_id_fkey FOREIGN KEY (component_id) REFERENCES public.components(id),
  CONSTRAINT attendance_eligibility_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.attendance_summary (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  student_id uuid NOT NULL,
  term_id uuid NOT NULL,
  quadrant_id character varying NOT NULL,
  total_sessions integer NOT NULL DEFAULT 0,
  attended_sessions integer NOT NULL DEFAULT 0,
  percentage numeric DEFAULT 
CASE
    WHEN (total_sessions > 0) THEN (((attended_sessions)::numeric / (total_sessions)::numeric) * (100)::numeric)
    ELSE (0)::numeric
END,
  last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT attendance_summary_pkey PRIMARY KEY (id),
  CONSTRAINT attendance_summary_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id),
  CONSTRAINT attendance_summary_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT attendance_summary_quadrant_id_fkey FOREIGN KEY (quadrant_id) REFERENCES public.quadrants(id)
);
CREATE TABLE public.audit_logs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  action character varying NOT NULL,
  entity_type character varying NOT NULL,
  entity_id uuid,
  old_values jsonb,
  new_values jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.backup_batches (
  id uuid,
  name character varying,
  year integer,
  start_date date,
  end_date date,
  is_active boolean,
  created_at timestamp without time zone
);
CREATE TABLE public.backup_students (
  id uuid,
  user_id uuid,
  registration_no character varying,
  name character varying,
  course character varying,
  batch_id uuid,
  section_id uuid,
  house_id uuid,
  gender USER-DEFINED,
  phone character varying,
  preferences jsonb,
  overall_score numeric,
  grade USER-DEFINED,
  status USER-DEFINED,
  created_at timestamp without time zone,
  updated_at timestamp without time zone,
  current_term_id uuid
);
CREATE TABLE public.backup_terms (
  id uuid,
  name character varying,
  description text,
  start_date date,
  end_date date,
  is_active boolean,
  is_current boolean,
  academic_year character varying,
  created_at timestamp without time zone
);
CREATE TABLE public.batch_term_progression (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  batch_id uuid,
  term_id uuid,
  term_number integer NOT NULL,
  status character varying DEFAULT 'upcoming'::character varying,
  start_date date,
  end_date date,
  completion_date date,
  students_enrolled integer DEFAULT 0,
  students_completed integer DEFAULT 0,
  students_failed integer DEFAULT 0,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT batch_term_progression_pkey PRIMARY KEY (id),
  CONSTRAINT batch_term_progression_batch_id_fkey FOREIGN KEY (batch_id) REFERENCES public.batches(id),
  CONSTRAINT batch_term_progression_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.batches (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL,
  year integer NOT NULL,
  start_date date NOT NULL,
  end_date date NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  current_term_number integer DEFAULT 1,
  max_terms integer DEFAULT 4,
  batch_start_date date DEFAULT CURRENT_DATE,
  expected_graduation_date date,
  batch_status character varying DEFAULT 'active'::character varying,
  CONSTRAINT batches_pkey PRIMARY KEY (id)
);
CREATE TABLE public.components (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  sub_category_id uuid NOT NULL,
  name character varying NOT NULL,
  description text,
  weightage numeric NOT NULL CHECK (weightage > 0::numeric AND weightage <= 100::numeric),
  max_score numeric NOT NULL DEFAULT 5.00,
  minimum_score numeric NOT NULL DEFAULT 0.00,
  category USER-DEFINED NOT NULL,
  display_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT components_pkey PRIMARY KEY (id),
  CONSTRAINT components_sub_category_id_fkey FOREIGN KEY (sub_category_id) REFERENCES public.sub_categories(id)
);
CREATE TABLE public.data_imports (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  import_type USER-DEFINED NOT NULL,
  filename character varying NOT NULL,
  file_path character varying NOT NULL,
  status USER-DEFINED DEFAULT 'Pending'::import_status,
  total_records integer DEFAULT 0,
  processed_records integer DEFAULT 0,
  successful_records integer DEFAULT 0,
  failed_records integer DEFAULT 0,
  error_log jsonb DEFAULT '[]'::jsonb,
  processing_log jsonb DEFAULT '[]'::jsonb,
  term_id uuid,
  imported_by uuid NOT NULL,
  started_at timestamp without time zone,
  completed_at timestamp without time zone,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT data_imports_pkey PRIMARY KEY (id),
  CONSTRAINT data_imports_imported_by_fkey FOREIGN KEY (imported_by) REFERENCES public.users(id),
  CONSTRAINT data_imports_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.direct_assessments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  task_id uuid NOT NULL,
  student_id uuid NOT NULL,
  score numeric NOT NULL CHECK (score >= 0::numeric AND score <= 100::numeric),
  feedback text,
  private_notes text,
  assessed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  assessed_by uuid NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  term_id uuid NOT NULL,
  CONSTRAINT direct_assessments_pkey PRIMARY KEY (id),
  CONSTRAINT direct_assessments_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id),
  CONSTRAINT direct_assessments_assessed_by_fkey FOREIGN KEY (assessed_by) REFERENCES public.users(id),
  CONSTRAINT direct_assessments_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT direct_assessments_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(id)
);
CREATE TABLE public.email_logs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  recipient_email character varying NOT NULL,
  recipient_user_id uuid,
  subject character varying NOT NULL,
  email_type USER-DEFINED NOT NULL,
  template_name character varying,
  status USER-DEFINED DEFAULT 'Queued'::email_status,
  sent_at timestamp without time zone,
  delivered_at timestamp without time zone,
  error_message text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT email_logs_pkey PRIMARY KEY (id),
  CONSTRAINT email_logs_recipient_user_id_fkey FOREIGN KEY (recipient_user_id) REFERENCES public.users(id)
);
CREATE TABLE public.feedback (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  student_id uuid NOT NULL,
  teacher_id uuid,
  subject character varying NOT NULL,
  category USER-DEFINED NOT NULL,
  message text NOT NULL,
  priority USER-DEFINED DEFAULT 'Medium'::priority_type,
  status USER-DEFINED DEFAULT 'Submitted'::feedback_status,
  response text,
  submitted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  resolved_at timestamp without time zone,
  resolved_by uuid,
  CONSTRAINT feedback_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_resolved_by_fkey FOREIGN KEY (resolved_by) REFERENCES public.users(id),
  CONSTRAINT feedback_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT feedback_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id)
);
CREATE TABLE public.file_uploads (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  original_filename character varying NOT NULL,
  stored_filename character varying NOT NULL,
  file_path character varying NOT NULL,
  file_size bigint NOT NULL CHECK (file_size > 0),
  mime_type character varying NOT NULL,
  file_hash character varying NOT NULL,
  uploaded_by uuid NOT NULL,
  entity_type character varying,
  entity_id uuid,
  is_public boolean DEFAULT false,
  upload_purpose USER-DEFINED DEFAULT 'Other'::upload_purpose,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT file_uploads_pkey PRIMARY KEY (id),
  CONSTRAINT file_uploads_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES public.users(id)
);
CREATE TABLE public.houses (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL UNIQUE,
  color character varying NOT NULL,
  description text,
  total_points integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT houses_pkey PRIMARY KEY (id)
);
CREATE TABLE public.intervention_enrollments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  intervention_id uuid NOT NULL,
  student_id uuid NOT NULL,
  enrollment_date date NOT NULL DEFAULT CURRENT_DATE,
  enrollment_status USER-DEFINED DEFAULT 'Enrolled'::intervention_enrollment_status,
  enrollment_type USER-DEFINED DEFAULT 'Optional'::enrollment_type,
  progress_data jsonb DEFAULT '{}'::jsonb,
  current_score numeric DEFAULT 0.00,
  completion_percentage numeric DEFAULT 0.00,
  enrolled_by uuid NOT NULL,
  enrollment_deadline timestamp without time zone,
  CONSTRAINT intervention_enrollments_pkey PRIMARY KEY (id),
  CONSTRAINT intervention_enrollments_intervention_id_fkey FOREIGN KEY (intervention_id) REFERENCES public.interventions(id),
  CONSTRAINT intervention_enrollments_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT intervention_enrollments_enrolled_by_fkey FOREIGN KEY (enrolled_by) REFERENCES public.users(id)
);
CREATE TABLE public.intervention_microcompetencies (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  intervention_id uuid NOT NULL,
  microcompetency_id uuid NOT NULL,
  weightage numeric NOT NULL CHECK (weightage > 0::numeric AND weightage <= 100::numeric),
  max_score numeric NOT NULL DEFAULT 10.00 CHECK (max_score > 0::numeric),
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT intervention_microcompetencies_pkey PRIMARY KEY (id),
  CONSTRAINT intervention_microcompetencies_intervention_id_fkey FOREIGN KEY (intervention_id) REFERENCES public.interventions(id),
  CONSTRAINT intervention_microcompetencies_microcompetency_id_fkey FOREIGN KEY (microcompetency_id) REFERENCES public.microcompetencies(id)
);
CREATE TABLE public.intervention_quadrants (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  intervention_id uuid NOT NULL,
  quadrant_id character varying NOT NULL,
  weightage numeric NOT NULL CHECK (weightage > 0::numeric AND weightage <= 100::numeric),
  components jsonb DEFAULT '[]'::jsonb,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT intervention_quadrants_pkey PRIMARY KEY (id),
  CONSTRAINT intervention_quadrants_intervention_id_fkey FOREIGN KEY (intervention_id) REFERENCES public.interventions(id),
  CONSTRAINT intervention_quadrants_quadrant_id_fkey FOREIGN KEY (quadrant_id) REFERENCES public.quadrants(id)
);
CREATE TABLE public.intervention_teachers (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  intervention_id uuid NOT NULL,
  teacher_id uuid NOT NULL,
  assigned_quadrants jsonb NOT NULL DEFAULT '[]'::jsonb,
  role USER-DEFINED DEFAULT 'Assistant'::teacher_role,
  permissions jsonb DEFAULT '[]'::jsonb,
  assigned_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  assigned_by uuid NOT NULL,
  is_active boolean DEFAULT true,
  CONSTRAINT intervention_teachers_pkey PRIMARY KEY (id),
  CONSTRAINT intervention_teachers_intervention_id_fkey FOREIGN KEY (intervention_id) REFERENCES public.interventions(id),
  CONSTRAINT intervention_teachers_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.users(id),
  CONSTRAINT intervention_teachers_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id)
);
CREATE TABLE public.interventions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL,
  description text,
  start_date date NOT NULL,
  end_date date NOT NULL,
  status USER-DEFINED DEFAULT 'Draft'::intervention_status,
  quadrant_weightages jsonb NOT NULL DEFAULT '{}'::jsonb,
  prerequisites jsonb DEFAULT '[]'::jsonb,
  max_students integer DEFAULT 50 CHECK (max_students > 0),
  objectives jsonb DEFAULT '[]'::jsonb,
  created_by uuid NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  term_id uuid,
  scoring_deadline timestamp without time zone,
  total_weightage numeric DEFAULT 100.00,
  is_scoring_open boolean DEFAULT false,
  CONSTRAINT interventions_pkey PRIMARY KEY (id),
  CONSTRAINT interventions_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id),
  CONSTRAINT interventions_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.kos_sync_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  sync_type character varying NOT NULL,
  status character varying NOT NULL,
  users_synced integer DEFAULT 0,
  errors_count integer DEFAULT 0,
  error_details jsonb,
  started_at timestamp without time zone NOT NULL,
  completed_at timestamp without time zone,
  triggered_by uuid,
  CONSTRAINT kos_sync_log_pkey PRIMARY KEY (id),
  CONSTRAINT kos_sync_log_triggered_by_fkey FOREIGN KEY (triggered_by) REFERENCES public.users(id)
);
CREATE TABLE public.microcompetencies (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  component_id uuid NOT NULL,
  name character varying NOT NULL,
  description text,
  weightage numeric NOT NULL CHECK (weightage > 0::numeric AND weightage <= 100::numeric),
  max_score numeric NOT NULL DEFAULT 10.00 CHECK (max_score > 0::numeric),
  display_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT microcompetencies_pkey PRIMARY KEY (id),
  CONSTRAINT microcompetencies_component_id_fkey FOREIGN KEY (component_id) REFERENCES public.components(id)
);
CREATE TABLE public.microcompetency_scores (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  student_id uuid NOT NULL,
  intervention_id uuid NOT NULL,
  microcompetency_id uuid NOT NULL,
  obtained_score numeric NOT NULL,
  max_score numeric NOT NULL,
  percentage numeric DEFAULT ((obtained_score / max_score) * (100)::numeric),
  scored_by uuid NOT NULL,
  scored_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  feedback text,
  status USER-DEFINED DEFAULT 'Submitted'::score_status,
  term_id uuid NOT NULL,
  CONSTRAINT microcompetency_scores_pkey PRIMARY KEY (id),
  CONSTRAINT microcompetency_scores_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT microcompetency_scores_intervention_id_fkey FOREIGN KEY (intervention_id) REFERENCES public.interventions(id),
  CONSTRAINT microcompetency_scores_microcompetency_id_fkey FOREIGN KEY (microcompetency_id) REFERENCES public.microcompetencies(id),
  CONSTRAINT microcompetency_scores_scored_by_fkey FOREIGN KEY (scored_by) REFERENCES public.teachers(id),
  CONSTRAINT microcompetency_scores_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  title character varying NOT NULL,
  message text NOT NULL,
  type USER-DEFINED DEFAULT 'Info'::notification_type,
  category USER-DEFINED NOT NULL,
  is_read boolean DEFAULT false,
  action_url character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  expires_at timestamp without time zone,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  read_at timestamp without time zone,
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.quadrants (
  id character varying NOT NULL,
  name character varying NOT NULL,
  description text,
  weightage numeric NOT NULL CHECK (weightage > 0::numeric AND weightage <= 100::numeric),
  minimum_attendance numeric DEFAULT 0.00 CHECK (minimum_attendance >= 0::numeric AND minimum_attendance <= 100::numeric),
  business_rules jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  display_order integer DEFAULT 0,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT quadrants_pkey PRIMARY KEY (id)
);
CREATE TABLE public.scores (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  student_id uuid NOT NULL,
  component_id uuid NOT NULL,
  term_id uuid NOT NULL,
  obtained_score numeric NOT NULL,
  max_score numeric NOT NULL,
  percentage numeric DEFAULT ((obtained_score / max_score) * (100)::numeric),
  assessment_date date NOT NULL DEFAULT CURRENT_DATE,
  assessed_by uuid NOT NULL,
  assessment_type USER-DEFINED DEFAULT 'Teacher'::assessment_type,
  notes text,
  status USER-DEFINED DEFAULT 'Submitted'::score_status,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT scores_pkey PRIMARY KEY (id),
  CONSTRAINT scores_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT scores_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id),
  CONSTRAINT scores_component_id_fkey FOREIGN KEY (component_id) REFERENCES public.components(id),
  CONSTRAINT scores_assessed_by_fkey FOREIGN KEY (assessed_by) REFERENCES public.users(id)
);
CREATE TABLE public.sections (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  batch_id uuid NOT NULL,
  name character varying NOT NULL,
  capacity integer DEFAULT 60,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT sections_pkey PRIMARY KEY (id),
  CONSTRAINT sections_batch_id_fkey FOREIGN KEY (batch_id) REFERENCES public.batches(id)
);
CREATE TABLE public.shl_integrations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  student_id uuid NOT NULL UNIQUE,
  shl_user_id character varying NOT NULL UNIQUE,
  competency_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  last_sync_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  sync_status USER-DEFINED DEFAULT 'Success'::sync_status,
  error_message text,
  sync_attempts integer DEFAULT 0,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT shl_integrations_pkey PRIMARY KEY (id),
  CONSTRAINT shl_integrations_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id)
);
CREATE TABLE public.student_improvement_goals (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  student_id uuid NOT NULL,
  term_id uuid NOT NULL,
  component_id uuid NOT NULL,
  target_score numeric NOT NULL,
  target_date date NOT NULL,
  actions jsonb DEFAULT '[]'::jsonb,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  completed_at timestamp without time zone,
  CONSTRAINT student_improvement_goals_pkey PRIMARY KEY (id),
  CONSTRAINT student_improvement_goals_component_id_fkey FOREIGN KEY (component_id) REFERENCES public.components(id),
  CONSTRAINT student_improvement_goals_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT student_improvement_goals_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.student_level_progression (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid NOT NULL,
  term_id uuid NOT NULL,
  level_number integer NOT NULL,
  level_name character varying NOT NULL,
  progression_status character varying DEFAULT 'in_progress'::character varying,
  eligibility_status character varying DEFAULT 'pending'::character varying,
  attendance_percentage numeric,
  quadrant_scores jsonb,
  overall_score numeric,
  progression_date timestamp without time zone,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT student_level_progression_pkey PRIMARY KEY (id),
  CONSTRAINT student_level_progression_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT student_level_progression_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.student_profile_requests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid NOT NULL,
  requested_changes jsonb NOT NULL,
  current_values jsonb NOT NULL,
  request_reason text,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying::text, 'approved'::character varying::text, 'rejected'::character varying::text])),
  requested_by uuid NOT NULL,
  reviewed_by uuid,
  review_reason text,
  created_at timestamp without time zone DEFAULT now(),
  reviewed_at timestamp without time zone,
  CONSTRAINT student_profile_requests_pkey PRIMARY KEY (id),
  CONSTRAINT student_profile_requests_reviewed_by_fkey FOREIGN KEY (reviewed_by) REFERENCES public.users(id),
  CONSTRAINT student_profile_requests_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT student_profile_requests_requested_by_fkey FOREIGN KEY (requested_by) REFERENCES public.users(id)
);
CREATE TABLE public.student_rankings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid,
  term_id uuid,
  quadrant_id character varying,
  rank_position integer,
  total_students integer,
  score numeric,
  ranking_type character varying DEFAULT 'quadrant'::character varying,
  grade character varying,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT student_rankings_pkey PRIMARY KEY (id),
  CONSTRAINT student_rankings_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id),
  CONSTRAINT student_rankings_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id)
);
CREATE TABLE public.student_score_summary (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid NOT NULL,
  term_id uuid NOT NULL,
  persona_score numeric DEFAULT 0.00,
  wellness_score numeric DEFAULT 0.00,
  behavior_score numeric DEFAULT 0.00,
  discipline_score numeric DEFAULT 0.00,
  total_hps numeric DEFAULT 0.00 CHECK (total_hps >= 0::numeric AND total_hps <= 100::numeric),
  overall_grade character varying DEFAULT 'IC'::character varying,
  overall_status character varying DEFAULT 'Progress'::character varying,
  last_calculated_at timestamp without time zone DEFAULT now(),
  calculation_version integer DEFAULT 1,
  CONSTRAINT student_score_summary_pkey PRIMARY KEY (id),
  CONSTRAINT student_score_summary_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT student_score_summary_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.student_term_progression (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid,
  batch_id uuid,
  term_id uuid,
  term_number integer NOT NULL,
  enrollment_date date DEFAULT CURRENT_DATE,
  completion_date date,
  status character varying DEFAULT 'enrolled'::character varying,
  eligibility_status character varying DEFAULT 'pending'::character varying,
  final_hps numeric,
  final_grade character varying,
  attendance_percentage numeric,
  quadrant_scores jsonb,
  progression_notes text,
  can_progress_to_next boolean DEFAULT false,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT student_term_progression_pkey PRIMARY KEY (id),
  CONSTRAINT student_term_progression_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id),
  CONSTRAINT student_term_progression_batch_id_fkey FOREIGN KEY (batch_id) REFERENCES public.batches(id),
  CONSTRAINT student_term_progression_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id)
);
CREATE TABLE public.student_terms (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  student_id uuid NOT NULL,
  term_id uuid NOT NULL,
  enrollment_status USER-DEFINED DEFAULT 'Enrolled'::enrollment_status,
  total_score numeric DEFAULT 0.00,
  grade USER-DEFINED DEFAULT 'IC'::grade_type,
  overall_status USER-DEFINED DEFAULT 'Progress'::status_type,
  rank integer,
  is_eligible boolean DEFAULT true,
  enrolled_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  completed_at timestamp without time zone,
  CONSTRAINT student_terms_pkey PRIMARY KEY (id),
  CONSTRAINT student_terms_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id),
  CONSTRAINT student_terms_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id)
);
CREATE TABLE public.students (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL UNIQUE,
  registration_no character varying NOT NULL UNIQUE,
  name character varying NOT NULL,
  course character varying NOT NULL,
  batch_id uuid,
  section_id uuid,
  house_id uuid,
  gender USER-DEFINED,
  phone character varying,
  preferences jsonb DEFAULT '{}'::jsonb,
  overall_score numeric DEFAULT 0.00,
  grade USER-DEFINED DEFAULT 'IC'::grade_type,
  status USER-DEFINED DEFAULT 'Active'::student_status,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  current_term_id uuid NOT NULL,
  CONSTRAINT students_pkey PRIMARY KEY (id),
  CONSTRAINT students_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT students_section_id_fkey FOREIGN KEY (section_id) REFERENCES public.sections(id),
  CONSTRAINT students_house_id_fkey FOREIGN KEY (house_id) REFERENCES public.houses(id),
  CONSTRAINT students_current_term_id_fkey FOREIGN KEY (current_term_id) REFERENCES public.terms(id),
  CONSTRAINT students_batch_id_fkey FOREIGN KEY (batch_id) REFERENCES public.batches(id)
);
CREATE TABLE public.sub_categories (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  quadrant_id character varying NOT NULL,
  name character varying NOT NULL,
  description text,
  weightage numeric NOT NULL CHECK (weightage > 0::numeric AND weightage <= 100::numeric),
  display_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT sub_categories_pkey PRIMARY KEY (id),
  CONSTRAINT sub_categories_quadrant_id_fkey FOREIGN KEY (quadrant_id) REFERENCES public.quadrants(id)
);
CREATE TABLE public.system_settings (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  setting_key character varying NOT NULL UNIQUE,
  setting_value jsonb NOT NULL,
  description text,
  category character varying NOT NULL,
  is_public boolean DEFAULT false,
  updated_by uuid NOT NULL,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT system_settings_pkey PRIMARY KEY (id),
  CONSTRAINT system_settings_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.users(id)
);
CREATE TABLE public.task_microcompetencies (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  task_id uuid NOT NULL,
  microcompetency_id uuid NOT NULL,
  weightage numeric NOT NULL DEFAULT 100.00 CHECK (weightage > 0::numeric AND weightage <= 100::numeric),
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT task_microcompetencies_pkey PRIMARY KEY (id),
  CONSTRAINT task_microcompetencies_microcompetency_id_fkey FOREIGN KEY (microcompetency_id) REFERENCES public.microcompetencies(id),
  CONSTRAINT task_microcompetencies_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(id)
);
CREATE TABLE public.task_submissions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  task_id uuid NOT NULL,
  student_id uuid NOT NULL,
  submitted_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  status USER-DEFINED DEFAULT 'Submitted'::submission_status,
  is_late boolean DEFAULT false,
  attachments jsonb DEFAULT '[]'::jsonb,
  submission_text text,
  score numeric,
  rubric_scores jsonb DEFAULT '[]'::jsonb,
  feedback text,
  private_notes text,
  graded_by uuid,
  graded_at timestamp without time zone,
  CONSTRAINT task_submissions_pkey PRIMARY KEY (id),
  CONSTRAINT task_submissions_graded_by_fkey FOREIGN KEY (graded_by) REFERENCES public.users(id),
  CONSTRAINT task_submissions_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT task_submissions_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(id)
);
CREATE TABLE public.tasks (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  intervention_id uuid NOT NULL,
  name character varying NOT NULL,
  description text,
  quadrant_id character varying,
  component_id uuid,
  max_score numeric NOT NULL DEFAULT 10.00 CHECK (max_score > 0::numeric),
  due_date timestamp without time zone NOT NULL,
  instructions text,
  rubric jsonb DEFAULT '[]'::jsonb,
  attachments jsonb DEFAULT '[]'::jsonb,
  submission_type USER-DEFINED DEFAULT 'Document'::submission_type,
  allow_late_submission boolean DEFAULT true,
  late_penalty numeric DEFAULT 0.00 CHECK (late_penalty >= 0::numeric AND late_penalty <= 100::numeric),
  status USER-DEFINED DEFAULT 'Draft'::task_status,
  created_by uuid NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  microcompetency_id uuid,
  created_by_teacher_id uuid,
  requires_submission boolean DEFAULT true,
  CONSTRAINT tasks_pkey PRIMARY KEY (id),
  CONSTRAINT tasks_quadrant_id_fkey FOREIGN KEY (quadrant_id) REFERENCES public.quadrants(id),
  CONSTRAINT tasks_microcompetency_id_fkey FOREIGN KEY (microcompetency_id) REFERENCES public.microcompetencies(id),
  CONSTRAINT tasks_intervention_id_fkey FOREIGN KEY (intervention_id) REFERENCES public.interventions(id),
  CONSTRAINT tasks_created_by_teacher_id_fkey FOREIGN KEY (created_by_teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT tasks_component_id_fkey FOREIGN KEY (component_id) REFERENCES public.components(id),
  CONSTRAINT tasks_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.teacher_assignments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  teacher_id uuid NOT NULL,
  student_id uuid NOT NULL,
  term_id uuid NOT NULL,
  quadrant_id character varying NOT NULL,
  assigned_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  assigned_by uuid NOT NULL,
  is_active boolean DEFAULT true,
  notes text,
  CONSTRAINT teacher_assignments_pkey PRIMARY KEY (id),
  CONSTRAINT teacher_assignments_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.users(id),
  CONSTRAINT teacher_assignments_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT teacher_assignments_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT teacher_assignments_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id)
);
CREATE TABLE public.teacher_microcompetency_assignments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  intervention_id uuid NOT NULL,
  teacher_id uuid NOT NULL,
  microcompetency_id uuid NOT NULL,
  can_score boolean DEFAULT true,
  can_create_tasks boolean DEFAULT true,
  assigned_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  assigned_by uuid NOT NULL,
  is_active boolean DEFAULT true,
  CONSTRAINT teacher_microcompetency_assignments_pkey PRIMARY KEY (id),
  CONSTRAINT teacher_microcompetency_assignments_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT teacher_microcompetency_assignments_intervention_id_fkey FOREIGN KEY (intervention_id) REFERENCES public.interventions(id),
  CONSTRAINT teacher_microcompetency_assignments_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.users(id),
  CONSTRAINT teacher_microcompetency_assignments_microcompetency_id_fkey FOREIGN KEY (microcompetency_id) REFERENCES public.microcompetencies(id)
);
CREATE TABLE public.teachers (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL UNIQUE,
  employee_id character varying NOT NULL UNIQUE,
  name character varying NOT NULL,
  specialization character varying,
  department character varying,
  assigned_quadrants jsonb DEFAULT '[]'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT teachers_pkey PRIMARY KEY (id),
  CONSTRAINT teachers_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.term_lifecycle_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  term_id uuid,
  batch_id uuid,
  event_type character varying NOT NULL,
  event_date timestamp without time zone DEFAULT now(),
  triggered_by uuid,
  event_data jsonb,
  notes text,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT term_lifecycle_events_pkey PRIMARY KEY (id),
  CONSTRAINT term_lifecycle_events_batch_id_fkey FOREIGN KEY (batch_id) REFERENCES public.batches(id),
  CONSTRAINT term_lifecycle_events_term_id_fkey FOREIGN KEY (term_id) REFERENCES public.terms(id),
  CONSTRAINT term_lifecycle_events_triggered_by_fkey FOREIGN KEY (triggered_by) REFERENCES public.users(id)
);
CREATE TABLE public.terms (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL,
  description text,
  start_date date NOT NULL,
  end_date date NOT NULL,
  is_active boolean DEFAULT false,
  is_current boolean DEFAULT false,
  academic_year character varying NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  term_number integer DEFAULT 1,
  term_status character varying DEFAULT 'upcoming'::character varying,
  level_name character varying,
  attendance_threshold numeric DEFAULT 75.00,
  progression_requirements jsonb,
  eligibility_rules jsonb,
  completion_date date,
  max_students integer,
  level_number integer DEFAULT 1,
  CONSTRAINT terms_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_sessions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  session_token character varying NOT NULL UNIQUE,
  refresh_token character varying NOT NULL UNIQUE,
  ip_address inet,
  user_agent text,
  expires_at timestamp without time zone NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  last_accessed timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  is_active boolean DEFAULT true,
  CONSTRAINT user_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT user_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  username character varying NOT NULL UNIQUE,
  email character varying NOT NULL UNIQUE,
  password_hash character varying NOT NULL,
  role USER-DEFINED NOT NULL,
  status USER-DEFINED DEFAULT 'active'::user_status,
  last_login timestamp without time zone,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  microsoft_id character varying,
  sso_provider character varying,
  erp_validated boolean DEFAULT false,
  first_name character varying,
  last_name character varying,
  kos_user_id character varying,
  authenticated_via character varying DEFAULT 'local'::character varying,
  user_source character varying DEFAULT 'local'::character varying,
  promoted_by uuid,
  promoted_at timestamp without time zone,
  promotion_reason text,
  last_kos_sync timestamp without time zone,
  CONSTRAINT users_pkey PRIMARY KEY (id)
);